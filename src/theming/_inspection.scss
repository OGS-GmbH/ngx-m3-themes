@use "sass:map";
@use "@angular/material" as mat;
@use "./internals" as internals;

@function _resolve-token($theme, $token) {
  $is-internal-token: internals.is-internal-token($token);

  @if $is-internal-token {
    @return mat.get-theme-color($theme, $token);
  }

  $internal-root: map.get($theme, internals.$theming);
  $internal-color-tokens: map.get($internal-root, color-tokens);
  $internal-tokens-root: map.get($internal-color-tokens, internals.$tokens-root);

  $is-valid-token: map.has-key($internal-tokens-root, $token);

  @if not $is-valid-token {
    @error "Token \"" + $token + "\" is not defined.";
  }

  @return map.get($internal-tokens-root, $token);
};

@function _resolve-palette($theme, $palette, $hue) {
  $is-internal-palette: internals.is-internal-palette($palette);

  @if $is-internal-palette {
    @return mat.get-theme-color($theme, $palette, $hue);
  }

  $internal-root: map.get($theme, internals.$theming);
  $internal-palettes: map.get($internal-root, palettes);

  $is-valid-palette: map.has-key($internal-palettes, $palette);

  @if not $is-valid-palette {
    @error "Palette \"" + $palette + "\" does not exists.";
  }

  $internal-palette: map.get($internal-palettes, $palette);

  $is-valid-hue: map.has-key($internal-palette, $hue);

  @if not $is-valid-hue {
    @error "Hue \"" + $hue + "\" from palette \"" + $palette + "\" is not defined.";
  }

  @return map.get($internal-palette, $hue);
};

@function get-theme-color($theme, $args...) {
  $theme-version: mat.get-theme-version($theme);

  @if $theme-version != 1 {
    @error "Only M3 themes are currently supported."
  }

  $args-length: length($args);

  @if $args-length == 1 {
    @return _resolve-token($theme, nth($args, 1));
  } @else if $args-length == 2 {
    @return _resolve-palette($theme, $args...);
  } @else {
    @error "Argument length is not supposed to be more then two arguments long.";
  }
};

